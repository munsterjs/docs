(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{64:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return c})),a.d(t,"metadata",(function(){return l})),a.d(t,"rightToc",(function(){return s})),a.d(t,"default",(function(){return p}));var n=a(2),r=a(6),i=(a(0),a(91)),c={id:"custom-directive.md",title:"Custom Directive",sidebar_label:"Custom directive",slug:"/custom-directive"},l={unversionedId:"custom-directive.md",id:"custom-directive.md",isDocsHomePage:!1,title:"Custom Directive",description:"Custom directives are classes that manipulates an element in our munster application.",source:"@site/docs\\custom-directive.md",slug:"/custom-directive",permalink:"/docs/docs/custom-directive",editUrl:"https://github.com/munsterjs/docs/blob/master/docs/custom-directive.md",version:"current",sidebar_label:"Custom directive",sidebar:"someSidebar",previous:{title:"Directives",permalink:"/docs/docs/directives"},next:{title:"Navigate",permalink:"/docs/docs/navigate"}},s=[{value:"Creating a custom directive",id:"creating-a-custom-directive",children:[]},{value:"Use the custom directive",id:"use-the-custom-directive",children:[]},{value:"Value change watcher",id:"value-change-watcher",children:[]},{value:"Directive useful methods",id:"directive-useful-methods",children:[]}],o={rightToc:s};function p(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},o,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Custom directives are classes that manipulates an element in our munster application.\nDirective is sometimes called as namespace in this framework since the syntax to write directives in view is ",Object(i.b)("inlineCode",{parentName:"p"},"<namespace>:<namespaceName>={<value>}"),".\nThe value is not required."),Object(i.b)("h2",{id:"creating-a-custom-directive"},"Creating a custom directive"),Object(i.b)("p",null,"To create a custom directive. We just need create a class that extends the ",Object(i.b)("inlineCode",{parentName:"p"},"Directive")," class provided by the framework."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"import { Directive } from '@munster/core';\n\nexport class HighlightDirective extends Directive { }\n")),Object(i.b)("p",null,"The next step is to add a static property called namespace that has a value of string.\nThis is the namespaces that we want to use in our view."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"import { Directive } from '@munster/core';\n\nexport class HighlightDirective extends Directive {\n    public static namespace: string = 'highlight';\n}\n")),Object(i.b)("p",null,"The next thing we need to do is to loop through the namespaces of an element using the ",Object(i.b)("inlineCode",{parentName:"p"},"this.eachNamespace")," method when the directive is initialized."),Object(i.b)("p",null,"We will log the value of ",Object(i.b)("inlineCode",{parentName:"p"},"namespaceName")," and ",Object(i.b)("inlineCode",{parentName:"p"},"valueCaller")," in the browser's console for now to check their values."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"import { Directive } from '@munster/core';\n\nexport class HighlightDirective extends Directive {\n\n    public static namespace: string = 'highlight';\n\n    init() {\n        /**\n         * namespace syntax <namespace>:<namespaceName>={<value>}\n         * @param namespaceName - red | yellow\n         * @param valueCaller - a function that returns the value of the namespace\n         */\n        this.eachNamespace((namespaceName: string, valueCaller: () => any) => {\n            console.log('namespaceName: ', namespaceName);\n            console.log('valueCaller: ', valueCaller());\n        });\n    }\n}\n")),Object(i.b)("p",null,"If we use the directive above using this template:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'<div highlight:red="sample value"></div>\n')),Object(i.b)("p",null,"Then the console should log something like this:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"namespaceName: red\nvalueCaller: sample value\n")),Object(i.b)("p",null,"Next, we will implement the methods that we will use to highlight an element.\nFor this example, we will only accept ",Object(i.b)("inlineCode",{parentName:"p"},"red")," and ",Object(i.b)("inlineCode",{parentName:"p"},"yellow")," namespaceName and for the rest will throw an error."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"import { Directive } from '@munster/core';\n\nexport class HighlightDirective extends Directive {\n\n    public static namespace: string = 'highlight';\n\n    init() {\n        /**\n         * namespace syntax <namespace>:<namespaceName>={<value>}\n         * @param namespaceName - red | yellow\n         * @param valueCaller - a function that returns the value of the namespace\n         */\n        this.eachNamespace((namespaceName: string, valueCaller: () => any) => {\n            if (this[namespaceName]) {\n                this[namespaceName](valueCaller);\n            } else {\n                directiveNotFoundError(ViewDirectiveClass.namespace, namespaceName);\n            }\n        });\n    }\n\n    private red(valueCaller: () => any): void {\n        this.getElement().style.background = 'red';\n    }\n\n    private yellow(valueCaller: () => any): void {\n        this.getElement().style.background = 'yellow';\n    }\n}\n")),Object(i.b)("p",null,"The namespaces will call its respective class methods once used in the view."),Object(i.b)("p",null,"For the example above, ",Object(i.b)("inlineCode",{parentName:"p"},"highlight:red")," will call the method ",Object(i.b)("inlineCode",{parentName:"p"},"this.red")," with the parameter of ",Object(i.b)("inlineCode",{parentName:"p"},"valueCaller"),"."),Object(i.b)("h2",{id:"use-the-custom-directive"},"Use the custom directive"),Object(i.b)("p",null,"We use the syntax ",Object(i.b)("inlineCode",{parentName:"p"},"<namespace>:<namespaceName>={<value>}")," to use a directive."),Object(i.b)("p",null,"Using the example directive above we can change the background color of an element by applying a directive to it's opening tag."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"<div>\n    <p highlight:red>I am in a red line.</p>\n    <p highlight:blue>I am in a blue line.</p>\n</div>\n")),Object(i.b)("p",null,"Please remember that directive value is optional."),Object(i.b)("h2",{id:"value-change-watcher"},"Value change watcher"),Object(i.b)("p",null,"To let our directive react when it's a value is changed we can use the ",Object(i.b)("inlineCode",{parentName:"p"},"this.$watch")," method of a directive.\nThe watch method has a parameters of value caller, on change callback, and an optional parameter for initial value."),Object(i.b)("p",null,"Here's an example on how to change the background color of an element based on the value passed to it namespace."),Object(i.b)("h4",{id:"the-directive"},"The directive"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"import { Directive } from '@munster/core';\n\nexport class HighlightDirective extends Directive {\n\n    public static namespace: string = 'highlight';\n\n    init() {\n        this.eachNamespace((namespaceName: string, valueCaller: () => any) => {\n            if (this[namespaceName]) {\n                this[namespaceName](valueCaller);\n            } else {\n                directiveNotFoundError(ViewDirectiveClass.namespace, namespaceName);\n            }\n        });\n    }\n\n    private color(valueCaller: () => any): void {\n        this.watch(valueCaller, (newValue) => {\n            this.getElement().style.background = newValue;\n        }, 'red');\n    }\n}\n")),Object(i.b)("h4",{id:"the-component"},"The component"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"<p highlight:color={this.color}>Hello World!</p>\n")),Object(i.b)("h2",{id:"directive-useful-methods"},"Directive useful methods"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Methods"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:null})))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"init()"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"This method is called once the directive is initialized.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"getComponent()"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"This method returns the current component where the directive is used.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"getElement()"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"This method returns the element where the directive is used.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"getNamespaces()"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"This method returns an object that contains the namespaces of an element.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"eachNamespace()"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"This method loops through all the value of the namespaces.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"watch()"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"This method is used to watch if the value of a namespace is changed.")))))}p.isMDXComponent=!0},91:function(e,t,a){"use strict";a.d(t,"a",(function(){return m})),a.d(t,"b",(function(){return d}));var n=a(0),r=a.n(n);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function c(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?c(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):c(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=r.a.createContext({}),p=function(e){var t=r.a.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},m=function(e){var t=p(e.components);return r.a.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},b=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,c=e.parentName,o=s(e,["components","mdxType","originalType","parentName"]),m=p(a),b=n,d=m["".concat(c,".").concat(b)]||m[b]||u[b]||i;return a?r.a.createElement(d,l(l({ref:t},o),{},{components:a})):r.a.createElement(d,l({ref:t},o))}));function d(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,c=new Array(i);c[0]=b;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:n,c[1]=l;for(var o=2;o<i;o++)c[o]=a[o];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,a)}b.displayName="MDXCreateElement"}}]);